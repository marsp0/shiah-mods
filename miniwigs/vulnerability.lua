if GetRealmName() == "Spineshatter" then return end

local vulnerability_map = {
    [22277] = "Fire",
    [22278] = "Frost",
    [22279] = "Shadow",
    [22280] = "Nature",
    [22281] = "Arcane",
}

local mob_map = {}

local function vulnerability_on_combat_log()
    local timestamp, subevent, _, s_guid, s_name, _, _, d_guid = CombatLogGetCurrentEventInfo()
    if subevent ~= "SPELL_AURA_APPLIED" then return end

    local spell_id = select(12, CombatLogGetCurrentEventInfo())
    if not vulnerability_map[spell_id] then return end

    mob_map[d_guid] = spell_id

    if UnitGUID("target") ~= d_guid then return end
    miniwigs_announcer_set_text(vulnerability_map[spell_id])
end

local function vulnerability_target_changed()
    local spell_id = mob_map[UnitGUID("target")]
    if not spell_id then return end
    miniwigs_announcer_set_text(vulnerability_map[spell_id])
end

local function vulnerability_on_enter_world(self)
    if IsInInstance() then
        self:RegisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
        self:RegisterEvent("PLAYER_TARGET_CHANGED")
        SM_print("Vulnerability detection enabled")
    else
        self:UnregisterEvent("COMBAT_LOG_EVENT_UNFILTERED")
        self:UnregisterEvent("PLAYER_TARGET_CHANGED")
        SM_print("Vulnerability detection disabled")
    end
end

local function vulnerability_on_event(self, event, ...)
    if event == "PLAYER_ENTERING_WORLD" then vulnerability_on_enter_world(self) end
    if event == "COMBAT_LOG_EVENT_UNFILTERED" then vulnerability_on_combat_log() end
    if event == "PLAYER_TARGET_CHANGED" then vulnerability_target_changed() end
end

local frame = CreateFrame("Frame", "VulnerabilityFrame", UIParent)
frame:RegisterEvent("PLAYER_ENTERING_WORLD")
frame:SetScript("OnEvent", vulnerability_on_event)
